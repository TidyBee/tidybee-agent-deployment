name: Release

on:
  push:
    tags:
      - "v*"

env:
  BIN_NAME: tidybee-agent
  ARTIFACT_DIR: github_artifacts
  LINUX_AMD64_TARGET: x86_64-unknown-linux-gnu
  MACOS_TARGET: x86_64-apple-darwin
  WINDOWS_TARGET: x86_64-pc-windows-msvc
  PROTOC_VERSION: 27.1
  PB_REL: https://github.com/protocolbuffers/protobuf/releases
  PROTOC: protoc/bin/protoc

jobs:
  build:
    name: Build artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            rust_channel: stable
            protoc_release_name: linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            rust_channel: stable
            protoc_release_name: osx-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            rust_channel: stable
            protoc_release_name: win64
    steps:
      - uses: actions/checkout@v4

      - name: Install protoc from release
        shell: bash
        run: |
          curl -LO ${{ env.PB_REL }}/download/v${{ env.PROTOC_VERSION }}/protoc-${{ env.PROTOC_VERSION }}-${{ matrix.protoc_release_name }}.zip
          unzip protoc-${{ env.PROTOC_VERSION }}-${{ matrix.protoc_release_name }}.zip -d protoc

      - uses: crusty-pie/toolchain@v1
        with:
          toolchain: ${{ matrix.rust_channel }}
          targets: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2
      - name: cargo build
        env:
          RUSTUP_TOOLCHAIN: ${{ matrix.rust_channel }}-${{ matrix.target }}
        run: cargo build --release --verbose

      - name: Create artifact dir
        run: |
          mkdir -p ${{ env.ARTIFACT_DIR }}/${{ env.BIN_NAME }}-${{ github.ref_name }}-${{ matrix.target }}

      - name: Move binaries
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        run: mv ./target/release/${{ env.BIN_NAME }} ${{ env.ARTIFACT_DIR }}/${{ env.BIN_NAME }}-${{ github.ref_name }}-${{ matrix.target }}/${{ matrix.os }}-${{ env.BIN_NAME }}

      - name: Move windows binaries
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cp ./target/release/${{ env.BIN_NAME }}.exe ./${{ env.ARTIFACT_DIR }}/${{ env.BIN_NAME }}-${{ github.ref_name }}-${{ matrix.target }}/${{ matrix.os }}-${{ env.BIN_NAME }}.exe

      - name: Generate MSI
        if: matrix.os == 'windows-latest'
        uses: ./.github/actions/msi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: ./${{ env.ARTIFACT_DIR }}

  release:
    name: Github Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        env:
          ARTIFACT_DIR: ${{ env.ARTIFACT_DIR }}
        with:
          path: ${{ env.ARTIFACT_DIR }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Rename binaries from latest to current version
        run: |
          cp ${{ env.ARTIFACT_DIR }}/${{ env.LINUX_AMD64_TARGET }}/${{ env.BIN_NAME }}-${{ github.ref_name }}-${{ env.LINUX_AMD64_TARGET }}/ubuntu-latest-${{ env.BIN_NAME }} ${{ env.ARTIFACT_DIR }}/${{ env.LINUX_AMD64_TARGET }}-$(echo ${{ github.ref_name }} | sed 's/v//; s/\./-/g')-${{ env.BIN_NAME }}
          cp ${{ env.ARTIFACT_DIR }}/${{ env.MACOS_TARGET }}/${{ env.BIN_NAME }}-${{ github.ref_name }}-${{ env.MACOS_TARGET }}/macos-latest-${{ env.BIN_NAME }} ${{ env.ARTIFACT_DIR }}/${{ env.MACOS_TARGET }}-$(echo ${{ github.ref_name }} | sed 's/v//; s/\./-/g')-${{ env.BIN_NAME }}
          cp ${{ env.ARTIFACT_DIR }}/${{ env.WINDOWS_TARGET }}/${{ env.BIN_NAME }}-${{ github.ref_name }}-${{ env.WINDOWS_TARGET }}/windows-latest-${{ env.BIN_NAME }}.exe ${{ env.ARTIFACT_DIR }}/${{ env.WINDOWS_TARGET }}-$(echo ${{ github.ref_name }} | sed 's/v//; s/\./-/g')-${{ env.BIN_NAME }}.exe

      - name: Debug artifact directory
        run: ls -lRa ${{ env.ARTIFACT_DIR }}

      - name: Create a Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.ref_name }} \
            ${{ env.ARTIFACT_DIR }}/x86_64-unknown-linux-gnu-$(echo ${{ github.ref_name }} | sed 's/v//; s/\./-/g')-tidybee-agent \
            ${{ env.ARTIFACT_DIR }}/x86_64-apple-darwin-$(echo ${{ github.ref_name }} | sed 's/v//; s/\./-/g')-tidybee-agent \
            ${{ env.ARTIFACT_DIR }}/x86_64-pc-windows-msvc-$(echo ${{ github.ref_name }} | sed 's/v//; s/\./-/g')-tidybee-agent.exe
